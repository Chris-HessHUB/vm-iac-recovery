---
# k3s Installation and Configuration Tasks

- name: Check if k3s is already installed
  stat:
    path: /usr/local/bin/k3s
  register: k3s_binary

- name: Download k3s installation script
  get_url:
    url: "{{ k3s_install_url }}"
    dest: /tmp/k3s-install.sh
    mode: '0755'
  when: not k3s_binary.stat.exists

- name: Install k3s
  shell: |
    INSTALL_K3S_VERSION="{{ k3s_version }}" \
    INSTALL_K3S_EXEC="server --disable=traefik" \
    /tmp/k3s-install.sh
  when: not k3s_binary.stat.exists
  register: k3s_install_result

- name: Wait for k3s to be ready
  wait_for:
    path: /etc/rancher/k3s/k3s.yaml
    timeout: 300
  when: k3s_install_result.changed

- name: Set permissions on k3s kubeconfig
  file:
    path: /etc/rancher/k3s/k3s.yaml
    mode: '0644'

- name: Create .kube directory for azureuser
  file:
    path: /home/azureuser/.kube
    state: directory
    owner: azureuser
    group: azureuser
    mode: '0755'

- name: Copy kubeconfig to azureuser home
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /home/azureuser/.kube/config
    remote_src: yes
    owner: azureuser
    group: azureuser
    mode: '0600'

- name: Create kubectl alias for azureuser
  lineinfile:
    path: /home/azureuser/.bashrc
    line: 'alias k=kubectl'
    create: yes

- name: Wait for k3s node to be ready
  shell: kubectl wait --for=condition=Ready node --all --timeout=300s
  register: node_ready
  retries: 5
  delay: 10
  until: node_ready.rc == 0

- name: Get k3s version
  command: k3s --version
  register: k3s_version_output
  changed_when: false

- name: Display k3s version
  debug:
    msg: "{{ k3s_version_output.stdout }}"

- name: Create Kubernetes namespaces
  shell: kubectl create namespace {{ item }} --dry-run=client -o yaml | kubectl apply -f -
  loop: "{{ k8s_namespaces }}"
  register: ns_result
  changed_when: "'created' in ns_result.stdout"
  failed_when: false  # Ignore if namespace already exists
