---
# MySQL Order Generator Deployment

- name: Copy MySQL secret to default namespace
  shell: |
    kubectl get secret mysql-secret -n mysql -o json | \
    jq 'del(.metadata.namespace, .metadata.resourceVersion, .metadata.uid, .metadata.creationTimestamp)' | \
    jq '.metadata.namespace = "default"' | \
    kubectl apply -f -
  register: secret_copy
  changed_when: "'created' in secret_copy.stdout or 'configured' in secret_copy.stdout"

- name: Deploy Order Generator
  shell: |
    cat <<EOF | kubectl apply -f -
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: mysql-order-generator
      namespace: default
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: order-generator
      template:
        metadata:
          labels:
            app: order-generator
        spec:
          containers:
          - name: order-generator
            image: python:3.9-slim
            command: ["/bin/bash"]
            args:
              - -c
              - |
                mkdir -p /app
                pip install mysql-connector-python faker
                cat > /app/generator.py <<'EOFPY'
                import mysql.connector
                import os
                import time
                import random
                from faker import Faker
                
                fake = Faker()
                
                def get_db_connection():
                    return mysql.connector.connect(
                        host=os.getenv('MYSQL_HOST'),
                        port=int(os.getenv('MYSQL_PORT')),
                        database=os.getenv('MYSQL_DATABASE'),
                        user=os.getenv('MYSQL_USER'),
                        password=os.getenv('MYSQL_PASSWORD')
                    )
                
                def create_orders_table(conn):
                    cursor = conn.cursor()
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS orders (
                            id INT AUTO_INCREMENT PRIMARY KEY,
                            customer_name VARCHAR(255),
                            product VARCHAR(255),
                            quantity INT,
                            total_price DECIMAL(10,2),
                            order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    ''')
                    conn.commit()
                    cursor.close()
                
                def generate_order(conn):
                    cursor = conn.cursor()
                    customer_name = fake.name()
                    product = fake.word()
                    quantity = random.randint(1, 10)
                    price = round(random.uniform(10.0, 500.0), 2)
                    
                    cursor.execute(
                        "INSERT INTO orders (customer_name, product, quantity, total_price) VALUES (%s, %s, %s, %s)",
                        (customer_name, product, quantity, price)
                    )
                    conn.commit()
                    cursor.close()
                    print(f"Generated order: {customer_name} - {product} x{quantity} = ${price}")
                
                def main():
                    print("Starting order generator...")
                    while True:
                        try:
                            conn = get_db_connection()
                            create_orders_table(conn)
                            generate_order(conn)
                            conn.close()
                            time.sleep(random.randint(5, 15))
                        except Exception as e:
                            print(f"Error: {e}")
                            time.sleep(30)
                
                if __name__ == '__main__':
                    main()
                EOFPY
                cd /app && python generator.py
            env:
            - name: MYSQL_HOST
              value: mysql.mysql.svc.cluster.local
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "{{ mysql_database }}"
            - name: MYSQL_USER
              value: "{{ mysql_user }}"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
    EOF
  register: ordgen_deploy
  changed_when: "'created' in ordgen_deploy.stdout or 'configured' in ordgen_deploy.stdout"

- name: Wait for Order Generator pods to be ready
  shell: kubectl wait --for=condition=ready pod -l app=order-generator -n default --timeout=300s
  register: ordgen_ready
  retries: 3
  delay: 10
  until: ordgen_ready.rc == 0
  failed_when: false

- name: Get Order Generator status
  shell: kubectl get pods -n default -l app=order-generator
  register: ordgen_pods
  changed_when: false

- name: Display Order Generator status
  debug:
    msg: "{{ ordgen_pods.stdout_lines }}"
